Http.setCookie_v2 "myCookie" "myVal" {} = { ``Set-Cookie`` = "myCookie=myVal" }
Http.setCookie_v2 "myCookie" "myVal" { Expires = Date.parse_v2_ster "2000-07-28T22:42:00Z"; ``Max-Age`` = -100; Domain = "darklang.com"; Path = "/my/path"; Secure = true; HttpOnly = false; SameSite = "Strict" } = { ``Set-Cookie`` = "myCookie=myVal; Secure; SameSite=Strict; Path=/my/path; Max-Age=-100; Expires=Fri, 28 Jul 2000 22:42:00 GMT; Domain=darklang.com"}

[test.date]
(match Date.parse_v2 "2019-07-28T22:42:00Z" with
| Ok date -> Http.setCookie_v2 "myCookie" "myVal" { Expires = date; ``Max-Age`` = 3600; Domain = "darklang.com"; Path = "/my/path"; Secure = true; HttpOnly = true; SameSite = "Strict" }) = { ``Set-Cookie`` = "myCookie=myVal; Secure; SameSite=Strict; Path=/my/path; Max-Age=3600; HttpOnly; Expires=Sun, 28 Jul 2019 22:42:00 GMT; Domain=darklang.com"}

[tests.errors]
Http.setCookie_v2 "myCookie" "myVal" { Expires = 5 } = Test.typeError_v0 "Expected the argument `Expires` to be a date, but it was `5`"
Http.setCookie_v2 "myCookie" "myVal" { ``Max-Age`` = "foo" } = Test.typeError_v0 "Expected the argument `Max-Age` to be a `Int` representing seconds, but it was `\"foo\"`"
Http.setCookie_v2 "myCookie" "myVal" { Domain = 5 } = Test.typeError_v0 "Expected the argument ``Path` or `Domain`` to be a string, but it was `5`"
Http.setCookie_v2 "myCookie" "myVal" { Path = 5 } = Test.typeError_v0 "Expected the argument ``Path` or `Domain`` to be a string, but it was `5`"
Http.setCookie_v2 "myCookie" "myVal" { Secure = 5 } = Test.typeError_v0 "Expected the argument `Secure or HttpOnly` to be `true` or `false`, but it was `5`"
Http.setCookie_v2 "myCookie" "myVal" { HttpOnly = 5 } = Test.typeError_v0 "Expected the argument `Secure or HttpOnly` to be `true` or `false`, but it was `5`"
Http.setCookie_v2 "myCookie" "myVal" { SameSite = 5 } = Test.typeError_v0 "Expected the argument `SameSite` to be `Strict`, `Lax`, or `None`, but it was `5`"
Http.setCookie_v2 "myCookie" "myVal" {``Max-Age`` = 3600; SameSite = "allthesecures" } = Test.typeError_v0 "Expected the argument `SameSite` to be `Strict`, `Lax`, or `None`, but it was `\"allthesecures\"`"
Http.setCookie_v2 "myCookie" "myVal" { Fake = "fake"} = Test.typeError_v0 "Keys must be `Expires`, `Max-Age`, `Domain`, `Path`, `Secure`, `HttpOnly`, and/or `SameSite`, but one of the keys was Fake"


Http.badRequest_v0 "Your request resulted in an error" = Http.response_v0 "Your request resulted in an error" 400
Http.badRequest_v0 1 = Test.typeError_v0 "Http::badRequest was called with a Int (1), but `error` expected a Str."
Http.notFound_v0 = Http.response_v0 null 404

Http.unauthorized_v0 = Http.response_v0 null 401

Http.forbidden_v0 = Http.response_v0 null 403

Http.success_v0 {test = "test1"} = Http.response_v0 {test = "test1"} 200
Http.success_v0 {``Content-Length`` = 0; Server = "darklang"} = Http.response_v0 {``Content-Length`` = 0; Server = "darklang"} 200
Http.success_v0 {``Content-Length`` = 0; Server = "darklang"} = Http.response_v0 (Dict.fromList_ster ([ ["Content-Length";0]; ["Server"; "darklang"] ])) 200

Http.responseWithHtml_v0 {test = "test1"}  200 = Http.responseWithHeaders_v0 {test = "test1"}  {``Content-Type`` = "text/html"} 200
Http.responseWithHtml_v0  {``Content-Length`` = 0; Server = "darklang"} 200 = Http.responseWithHeaders_v0  (Dict.fromList_ster ([ ["Content-Length";0]; ["Server";"darklang"] ])) {``Content-Type`` = "text/html"} 200
Http.responseWithHtml_v0  {``Content-Length`` = 0; Server = "darklang"} 4503599627370496I = Http.responseWithHeaders_v0  (Dict.fromList_ster ([ ["Content-Length";0]; ["Server";"darklang"] ])) {``Content-Type`` = "text/html"} 4503599627370496I

Http.responseWithText_v0 {Connection = "Keep-Alive"}  200 = Http.responseWithHeaders_v0  {Connection = "Keep-Alive"} {``Content-Type`` = "text/plain"} 200
Http.responseWithText_v0  {``Content-Length`` = 0; Server = "darklang"} 200 = Http.responseWithHeaders_v0  (Dict.fromList_ster ([ ["Content-Length";0]; ["Server";"darklang"] ])) {``Content-Type`` = "text/plain"} 200
Http.responseWithText_v0  {``Content-Length`` = 0; Server = "darklang"} 4503599627370496I = Http.responseWithHeaders_v0  (Dict.fromList_ster ([ ["Content-Length";0]; ["Server";"darklang"] ])) {``Content-Type`` = "text/plain"} 4503599627370496I

Http.responseWithJson_v0 {Connection = "Keep-Alive"}  200 = Http.responseWithHeaders_v0  {Connection = "Keep-Alive"} {``Content-Type`` = "application/json"} 200
Http.responseWithJson_v0  {``Content-Length`` = 0; Server = "darklang"} 200 = Http.responseWithHeaders_v0  (Dict.fromList_ster ([ ["Content-Length";0]; ["Server";"darklang"] ])) {``Content-Type`` = "application/json"} 200
Http.responseWithJson_v0  {``Content-Length`` = 0; Server = "darklang"} 4503599627370496I = Http.responseWithHeaders_v0  (Dict.fromList_ster ([ ["Content-Length";0]; ["Server";"darklang"] ])) {``Content-Type`` = "application/json"} 4503599627370496I

((Http.response_v0 "" 4503599627370496I) |> toString) = "4503599627370496 {  }\n\"\""

(Http.redirectTo_v0 "") |> toString = "302 \nnull"
(Http.redirectTo_v0 "bad url") |> toString = "302 bad url\nnull"
(Http.redirectTo_v0 "http://someothersite.com/") |> toString = "302 http://someothersite.com/\nnull"
(Http.redirectTo_v0 "/relativeUrl") |> toString = "302 /relativeUrl\nnull"

Http.responseWithHeaders_v0 null {} 200 = Http.response_v0 null 200
Http.responseWithHeaders_v0 "" {} 200 = Http.response_v0 "" 200
Http.responseWithHeaders_v0 "value" {} 201 = Http.response_v0 "value" 201
(Http.responseWithHeaders_v0 "value" { ``Server`` = "darklang" } 201) |> toString = "201 { Server: darklang }\n\"value\""
(Http.responseWithHeaders_v0 4503599627370496I { ``Server`` = "darklang"; ``X-Secret-Key`` = "p@ssw0rd" } 200) |> toString = "200 { Server: darklang,X-Secret-Key: p@ssw0rd }\n4503599627370496"